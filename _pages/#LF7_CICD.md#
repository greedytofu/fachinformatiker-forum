

# Git

Die Grundlage eines CI/CD-Deployments ist GIT SCM. Bitte mache erst den Git-Kurs und stelle sicher, dass Du folgebde Punkt verstanden hast:

- Cloning
- Adding
- Committing
- Pushing
- Branching
- Merging
- Pull Request

Damit das SCM möglichst problemlos erfolgt, erstellen wir einen Key für die Authentifizierung mit Github:

```bash
ssh-keygen -t rsa -b 4096
```

Es werden in ~/.ssh zwei Schlüssel erstellt. Der Schlüssel id_rsa.pub wird bei Github eingefügt. Mein Profil (oben rechts), Settings und dann "SSH und GPG keys".

# Build Automation

Build Automation umfasst folgende Punkte:

- Compilieren
- Abhängigkeiten lösen
- Automatische Tests
- Packet bauen für die Verteilung

Zum lösen dieser Probleme setzen wir das Tool Gradle ein. Es gibt sehr viele Tools, die diese Aufgaben lösen können, sie sind aber meistens von bestimmten Umgebungen oder Programmiersprachen abhängig. Gradle ist ein universells Tool. Gradle ist in Java programmiert und benötigt damit ein JDK Version 7 und höher. Ein weiter Nachteil ist, dass es zum gegenwärtigen Zeitpunkt ein Intel-kompatible Architektur erwartet.

## Installation von Gradle

```bash
sudo apt install openjdk-8-jdk
```

Wir überprüfen die Installation mit:

```bash
java -version
```

Momentan sollte von Gradle die Version 5 aktuell sein. Wir kopieren von (https://gradle.org/releases) den Link zur aktuellen Ve5sion und laden diese:

```bash
wget https://services.gradle.org/distributions/gradle-5.0-bin.zip -P /tmp
```

Wir entpacken Gradle:

```bash
sudo unzip -d /opt/gradle /tmp/gradle-*.zip
```

Als nächstes müssen wir eine neue Konfigurationsdatei anlegen:

```bash
sudo nano /etc/profile.d/gradle.sh
```

Und fügen folgenden Text ein:

```bash
export GRADLE_HOME=/opt/gradle/gradle-5.0
export PATH=${GRADLE_HOME}/bin:${PATH}
```

Wir machen das Skript ausführbar:

```bash
sudo chmod +x /etc/profile.d/gradle.sh
```

Wir laden die Umgebungsvariablen manuell:

```bash
source /etc/profile.d/gradle.sh
```

Überprüfen ob alles geklappt hat:

```bash
gradle -v
```

## gradle wraper

Gradle wraper ermöglicht es, dass immer dir richtige Gradle-Version für das Projekt verwendet wird.

Zuerst erstellen wir eine Datei .gitignore und schreiben in diese Datei .gradle. Dadurch wird die Datei .gradle nicht zu github gesynct.

Wir legen ein Projektordner an:

```bash
cd
mkdir mein-projekt
cd mein-projekt
```

Dannstarten wir den Wrapper

```bash
gradle wrapper
```

Wir schauen uns jetzt die angelegten Dateien und Verzeichnisse an:

```bash
ls -a
```

Wir installieren jetzt den Wrapper:

```bash
gradlew build
```



